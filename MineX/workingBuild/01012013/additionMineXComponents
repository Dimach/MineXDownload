function pagePrint(arg,asSelected)
term.setCursorPos(arg[1],arg[2])
term.write("+")
for i=1,arg[3]-2 do term.write("-") end
term.write("+")
term.setCursorPos(arg[1],arg[2]+arg[4]-1)
term.write("+")
for i=1,arg[3]-2 do term.write("-") end
term.write("+")
for i=arg[2]+1,arg[4]+arg[2]-2 do 
term.setCursorPos(arg[1],i)
if asSelected then term.write(">") else term.write("|") end
term.setCursorPos(arg[1]+arg[3]-1,i)
if asSelected then term.write("<") else term.write("|") end
end
local v=1
for i,text in pairs(arg["strings"]) do
if i >= arg[6] and i < arg[7]-1 then
term.setCursorPos(arg[1]+1,arg[2]+v)
term.write(text)
v=v+1
end
end
end

function pageAdd(x,y,lenX,lenY,index)
local drop={x,y,lenX,lenY,index,1,lenY,lenY,false}
drop["strings"]={}
return drop
end

function pageAddString(arg,index,strings)
for i=1,#arg do
if arg[i][5]==index then
local s=#arg[i]["strings"]+1
arg[i]["strings"][s]=strings
arg[i][8]=s+2
return arg
end
end
end

function pageClear(arg,index)
for i=1,#arg do
if arg[i][5]==index then
arg[i]["strings"]={}
arg[i][8]=arg[i][4]
return arg
end
end
end

function pageUpdate(ev,key,arg)
if ev=="key" then
if key==201 then
if arg[6]>1 then 
arg[6]=arg[6]-1 
arg[7]=arg[7]-1 
end
elseif key==209 then
if arg[7]<arg[8] then 
arg[6]=arg[6]+1 
arg[7]=arg[7]+1 
end
end
end
end

function pageColourUpdate(events,arg)
if events[1]=="mouse_click" and events[4]>=arg[2] and events[3]>=arg[1] and events[4]<=arg[2]+arg[4] and events[3]<=arg[1]+arg[3] then
arg[9]=true
else
arg[9]=false
end
if events[1]=="mouse_scroll" and arg[9] then
if events[2]==1 and arg[7]<arg[8] then
arg[6]=arg[6]+1 
arg[7]=arg[7]+1 
elseif events[2]==-1 and arg[6]>1 then
arg[6]=arg[6]-1 
arg[7]=arg[7]-1 
end
end
end

function pageAddSym(arg,index,sym)
for i=1,#arg do
if arg[i][5]==index then
if not arg[i]["strings"][#arg[i]["strings"]] then
arg[i]["strings"][#arg[i]["strings"]]=""
end
arg[i]["strings"][#arg[i]["strings"]]=arg[i]["strings"][#arg[i]["strings"]]..sym
return arg
end
end
end

function sReadEventUpdate(events,arg)
if events[1]=="key" and events[2] == 14 then
local asRus = false
local pwd = arg[3]
for i=1,#ruFixData do
if string.sub(pwd,#pwd,#pwd)==ruFixData[i] then
asRus = true
end
end
if not asRus then
arg[3] = string.sub(pwd,1,#pwd-2)
else
asRus=false
arg[3] = string.sub(pwd,1,#pwd-1)
end
elseif events[1]=="char" then
if getFixLen(arg[3]) < arg[5] then
arg[3] = arg[3]..events[2]
end
elseif events[1]=="key" and events[2] == 28 then
addFunctionToRun(arg[7])
end
end

function sReadColourEventUpdate(events,arg)
if events[1]=="mouse_click" and events[2]==1 and events[4]==arg[2] and events[3]>=arg[1]+1 and events[3]<=arg[1]+3+getFixLen(arg[3]) then
arg[8]=true
elseif events[1]=="mouse_click" then
arg[8]=false
end
if arg[8] then
if events[1]=="key" and events[2] == 14 then
local asRus = false
local pwd = arg[3]
for i=1,#UTF8FixData do
if string.sub(pwd,#pwd,#pwd)==UTF8FixData[i] then
asRus = true
end
end
if not asRus then
arg[3] = string.sub(pwd,1,#pwd-2)
else
asRus=false
arg[3] = string.sub(pwd,1,#pwd-1)
end
elseif events[1]=="char" then
if getFixLen(arg[3]) < arg[5] then
arg[3] = arg[3]..events[2]
end
elseif events[1]=="key" and events[2] == 28 then
addFunctionToRun(arg[7])
end
end
end

function sReadAdd(x,y,text,msg,maxLen,func,index)
if type(func)~="function" then error("Error #011:Исполняемый код не обнаружен") end
if type(x)~="number" or type(y)~="number" then error("Error #543:Кордината должна быть числом") end
if text==nil then text="" elseif msg==nil then msg="" end
if type(maxLen)~="number" then maxLen=999 end
return {x,y,text,msg,maxLen,index,func,false}
end

function sReadSpecial(arg)
if not term.isColour() or arg[8] then
term.setCursorPos(arg[1]+3+getFixLen(arg[3]),arg[2])
term.setCursorBlink(true)
end
end

function numReadEventUpdate(ev,key,arg)
if ev=="key" and key == 14 then
arg[3] = string.sub(arg[3],1,#arg[3]-1)
elseif ev=="char" and (key=="0" or key=="1" or key=="2" or key=="3" or key=="4" or key=="5" or key=="6" or key=="7" or key=="8" or key=="9") then
if getFixLen(arg[3]) < arg[5] then
arg[3] = arg[3]..key
end
end
end


function numbReadColourEventUpdate(events,arg)
if events[1]=="mouse_click" and events[2]==1 and events[4]==arg[2] and events[3]>=arg[1]+1 and events[3]<=arg[1]+3+getFixLen(arg[3]) then
arg[7]=true
elseif events[1]=="mouse_click" then
arg[7]=false
end
if arg[7] then
if events[1]=="key" and events[2] == 14 then
arg[3] = string.sub(arg[3],1,#arg[3]-1)
elseif events[1]=="char" and (events[2]=="0" or events[2]=="1" or events[2]=="2" or events[2]=="3" or events[2]=="4" or events[2]=="5" or events[2]=="6" or events[2]=="7" or events[2]=="8" or events[2]=="9") then
if getFixLen(arg[3]) < arg[5] then
arg[3] = arg[3]..events[2]
end
end
end
end


function readSetText(arg,index,param)
for i=1,#arg do
if arg[i][6]==index then
arg[i][3]=param
return arg
end
end
end

function editAdd(x,y,sym,fir,sek,s,d,b)
if sym==nil or sym=="" then return end
return {x,y,sym,fir,sek,s,d,b}
end

function editPrint(arg)
term.setCursorPos(arg[1],arg[2])
term.write(arg[3])
end

function editEventUpdate(events,arg)
if events[1]=="char" then
rebuild(arg[4]..arg[3]..events[2]..arg[5])
selectorChenge(arg[1],arg[2],"right")
end
if events[1]=="key" and events[2]==14 then
rebuild(arg[4]..arg[5])
selectorChenge(arg[1],arg[2],"left")
end
if events[1]=="key" and events[2]==211 then
rebuild(arg[4]..arg[7]..string.sub(arg[5],2))
selectorChenge(arg[1]-1,arg[2],"right")
end
if events[1]=="key" and events[2]==28 then
rebuild(arg[4]..arg[3].."\n"..arg[5])
selectorChenge(0,arg[2],"down")
end
local x,y=term.getSize()
if events[1]=="key" and events[2]==209 and arg[8]>fir+y-5 then
fir=fir+1
rebuild(lastText)
selectorChenge(arg[1],arg[2],"up")
elseif events[1]=="key" and events[2]==201 and fir > 2 then
fir=fir-1
rebuild(lastText)
selectorChenge(arg[1],arg[2],"down")
end
end

function editSpecial(arg)
term.setCursorPos(arg[1]+1,arg[2])
term.setCursorBlink(true)
end

function specEditEventUpdate(events,arg)
if events[1]=="key" and events[2]==211 then
rebuild(arg[4]..string.sub(arg[5],2))
selectorChenge(1,arg[2],"left")
end
if events[1]=="key" and events[2]==14 then
rebuild(string.sub(arg[4],1,#arg[4]-1)..arg[5])
selectorChenge(arg[6]+1,arg[2]-1,"left")
end
if events[1]=="char" then
rebuild(arg[4]..events[2]..arg[5])
selectorChenge(arg[1],arg[2],"right")
end
if events[1]=="key" and events[2]==28 then
rebuild(arg[4].."\n"..arg[5])
selectorChenge(0,arg[2],"down")
end
local x,y=term.getSize()
if events[1]=="key" and events[2]==209 and arg[8]>fir+y-5 then
fir=fir+1
rebuild(lastText)
selectorChenge(arg[1],arg[2],"up")
elseif events[1]=="key" and events[2]==201 and fir > 2 then
fir=fir-1
rebuild(lastText)
selectorChenge(arg[1],arg[2],"down")
end
end

function memoAddString(arg,index,strings)
for i=1,#arg do
if arg[i][5]==index then
local s=#arg[i]["strings"]+1
arg[i]["strings"][s]=strings
arg[i][8]=s+2
local v=arg[i][7]-arg[i][6]
arg[i][7]=arg[i][8]
arg[i][6]=arg[i][7]-v
return arg
end
end
end

addComponent("numbRead","selected",readPrint,readAdd,numReadEventUpdate,readSpecial,{readGetText},{"getText"},nil,nil,readColourEventUpdate)

addComponent("editFrame","selected",editPrint,editAdd,editEventUpdate,editSpecial)

addComponent("editSpecFrame","selected",editPrint,editAdd,specEditEventUpdate,editSpecial)

addComponent("specRead","selected",readPrint,sReadAdd,sReadEventUpdate,sReadSpecial,{readGetText,readSetText},{"getText","setText"},nil,nil,sReadColourEventUpdate)

addComponent("mineWebPage","selected",pagePrint,pageAdd,pageUpdate,nil,{pageAddString,pageClear,pageAddSym},{"addString","clear","addSymbol"},nil,nil,pageColourUpdate)

addComponent("memo","selected",pagePrint,pageAdd,pageUpdate,nil,{memoAddString,pageClear,pageAddSym},{"addString","clear","addSymbol"},nil,nil,pageColourUpdate)